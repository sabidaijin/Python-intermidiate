# n目並べ
# バーンサイドの補題
# ; 場合分けのいい勉強。エンジニアとして働くならちゃんとできなさい
# ; nの求め方を、計算実際にやってみる
# ; nは綺麗にまとまるはず、これも一手ずつで分けて求める
# 一般化するのが難しいけど、偶数と奇数で分けて、要素数何個のグループが何個あるのかというところで一般化できればいけそう

# 以下に難しいのを単純な組み合わせ問題にするのか

def cul(n):
    if n==0:
        return 1
    return n*cul(n-1)
    

def burnside():
    N = (1 / Naxis) * (Nall / (Nso * Nsx * Nse) + Nr90 + Nr180 + Nr270 + Nfh + Nfv + Nf_ + Nf_backslash)
    

    # Nso × Nsx × Nse
    # + Nr90 + Nr180 + Nr270 + Nfh + Nfv + Nf/ + Nf\)
    
    return N
# n=size
n = int(input())
i=0
#nがもし偶数なら
if n%2==0:
    while(i<n**2):
    # 偶数
        # 90度回転した時の場合分け数
        # 180度回転した時の場合分け数
        # 270度回転した時の場合分け数
        Naxis=8
        Nall=cul(n**2)
        # 水平対称軸で反転させて同じ状態になる組み合わせの数。
        Nfh=cul(n)*2
        # 垂直対称軸で反転させて同じ状態になる組み合わせの数。
        Nfv=cul(n)*2
        # 右斜対称軸で反転させて同じ状態になる組み合わせの数。
        Nf1=(n-1)*2
        # 左斜対称軸で反転させて同じ状態になる組み合わせの数
        Nf2=(n-1)*2
    
   
    
    
        sum=sum+burnside()
        i++
        
else:
    while(i<n**2):
    # 奇数
    #内部の(n-1)**2の四角と、外側のケースの場合分けを掛け算する？
    
        Naxis=8
        Nso=i/2+0.5
        Nsx=i//2
        Nse=n**2-i
        Nall=cul(n**2)
        # 90度回転した時の場合分け数
        # 180度回転した時の場合分け数
        # 270度回転した時の場合分け数
        Nr90
        3の時の変化、1,0,0,0,0,0,0,2,2
        Nr180
        1,0,4,12,12,0,4,6,
        Nr270
        # 水平対称軸で反転させて同じ状態になる組み合わせの数。
        Nfh=cul(n)*2
        3,3,12,21,18,9,18,9,12
        i:1からn,n,n+n**2,n+2*n**2,2n**2,n**2,2*n**2,n**2+n
        # 垂直対称軸で反転させて同じ状態になる組み合わせの数。
        Nfv=cul(n)*2
        # 右斜対称軸で反転させて同じ状態になる組み合わせの数。
        Nf1=(n-1)*2
        # 左斜対称軸で反転させて同じ状態になる組み合わせの数
        Nf2=(n-1)*2
    
        sum=sum+burnside()
        i++

print(sum)




これだと一手分しか計算できないので、この処理をn**2回分、場合を変えてやる？

nが偶数か奇数かで場合分け

iはn**2までが最大

遇数のi手目で重なり合わない奴らを集計


90度回転の時
180度回転の時
270度回転の時

合計はi手の時、〇〇パターンある
奇数のi手目で重なり合わない奴らを集計


90度回転の時
180度回転の時
270度回転の時


合計はi手の時、〇〇パターンある